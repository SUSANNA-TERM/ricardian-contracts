/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace org.example.water

contract Empty over WaterSupplyAgreement {
    clause donothing(request : WaterSupplyRequest) : WaterSupplyResponse {
      return WaterSupplyResponse{ output: "Hello " ++ request.input }
    }
  
    clause checkSupplyThreshold(request : SupplyCheckRequest) : SupplyCheckResponse {
        if request.consumption > contract.supplyThreshold 
        then return SupplyCheckResponse{ message: "Consumption exceeds the supply threshold." }
        else return SupplyCheckResponse{ message: "Consumption is within the supply threshold." }
  }

    clause checkLeakNotification(request : LeakCheckRequest) : LeakCheckResponse {
        if (request.consumption > contract.leakNotificationLimit)
        then return LeakCheckResponse{ message: "Leak likely: consumption exceeds leak notification limit." }
        else return LeakCheckResponse{ message: "No leak detected." }
    }

    clause checkInvoicePayment(request : PaymentCheckRequest) : PaymentCheckResponse {
        if (request.daysLate > contract.invoicePaymentDays)
        then return PaymentCheckResponse{ message: "Payment is overdue. Contract at risk of termination." }
        else return PaymentCheckResponse{ message: "Payment is within the acceptable timeframe." }
    }

    clause calculateCost(request : ConsumptionDataRequest) : ConsumptionDataResponse {
        let cost = request.consumptionData * contract.literPrice;
        return ConsumptionDataResponse{ consumptionCost: cost }
    }
}